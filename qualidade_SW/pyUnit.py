import unittest
from bubble import bubble

class TestClass(unittest.TestCase):
    def teste_negativo(self): #1
        arr = [64, 34, 25,-2, 12, 22, 11, 90]
        bubble.bubble_sort(arr)
        self.assertEqual([-2, 11, 12, 22, 25, 34, 64, 90],arr,"Retorno igual")
   
    def teste_vazio(self):  #2
        arr = []
        self.assertEqual([],bubble.bubble_sort(arr),"Retorno igual")


    """ 
    def teste_Letra_primeira():
        print('\nteste_Letra_primeira: ')
        try:
            arr, base = ['A', 64, 34, 25,  22, 11, 90]
            bubble.bubble_sort(arr)
            
            
            for i in range(len(arr)):
                print("% d" % arr[i], end=" ")

            for i in range(len(arr)-1):
                if i == len(arr):
                    break
                if arr[i] > arr[i+1]:
                    print('\nteste_Letra_primeira: falha em organizar')
                
        except Exception as ex:
            print('\nErro na validação de dados no teste_Letra_primeira ')
            print(ex)


    def teste_Letra_ultima():
        print('\nteste_Letra_ultima: ')
        try:
            arr, base = [90, 64, 34, 25,  22, 11, 'A']
            bubble.bubble_sort(arr)
            
            
            for i in range(len(arr)):
                print("% d" % arr[i], end=" ")

            for i in range(len(arr)-1):
                if i == len(arr):
                    break
                if arr[i] > arr[i+1]:
                    print('\nteste_Letra_ultima: falha em organizar')
                
        except Exception as ex:
            print('\nErro na validação de dados no teste_Letra_ultima ')
            print(ex)


    def teste_caminho_feliz():

        print('\nteste_caminho_feliz: ' )
        try:
            arr, base = [64, 34, 25, 12, 22, 11, 90]
            bubble.bubble_sort(arr)

            
            for i in range(len(arr)):
                print("% d" % arr[i], end=" ")

            for i in range(len(arr)-1):
                if i == len(arr):
                    break
                if arr[i] > arr[i+1]:
                    print('\nteste_caminho_feliz: falha em organizar')
                
        except Exception as ex:
            print('\nErro na validação de dados no teste_caminho_feliz ')
            print(ex)


    def teste_um_elemento():

        print('\nteste_um_elemento: ' )
        try:
            arr, base = [64]
            bubble.bubble_sort(arr)

            
            for i in range(len(arr)):
                print("% d" % arr[i], end=" ")

            for i in range(len(arr)-1):
                if i == len(arr):
                    break
                if arr[i] > arr[i+1]:
                    print('\teste_um_elemento: falha em organizar')
                
        except Exception as ex:
            print('\nErro na validação de dados no teste_um_elemento ')
            print(ex)


    def teste_ponto_flutuante():

        print('\nteste_ponto_flutuante: ')
        try:
            arr, base = [64, 34, 25, 12.5, 22, 11, 90]
            bubble.bubble_sort(arr)

            
            for i in range(len(arr)):
                print("% f" % arr[i], end=" ")

            for i in range(len(arr)-1):
                if i == len(arr):
                    break
                if arr[i] > arr[i+1]:
                    print('\nteste_ponto_flutuante: falha em organizar')
                
        except Exception as ex:
            print('\nErro na validação de dados no teste_ponto_flutuante ')
            print(ex)


    def teste_super_numero():

        print('\n teste_super_numero: ')
        try:
            arr, base

            498374592374957293479273592739457293748486523496582734658273465923756293847623472756982375692837465287356278395692873465289364528756892734659827658927465278963425895659237495273947298374592374957293479273592739457293748486523496582734658273465923756293847623472756982375692837465287356278395692873465289364528756892734659827658927465278963425895659237495273947298374592374957293479273592739457293748486523496582734658273465923756293847623472756982375692837465287356278395692873465289364528756892734659827658927465278963425895659237495273947298374592374957293479273592739457293748486523496582734658273465923756293847623472756982375692837465287356278395692873465289364528756892734659827658927465278963425895659237495273947298374592374957293479273592739457293748486523496582734658273465923756293847623472756982375692837465287356278395692873465289364528756892734659827658927465278963425895659237495273947298374592374957293479273592739457293748486523496582734658273465923756293847623472756982375692837465287356278395692873465289364528756892734659827658927465278963425895659237495273947298374592374957293479273592739457293748486523496582734658273465923756293847623472756982375692837465287356278395692873465289364528756892734659827658927465278963425895659237495273947298374592374957293479273592739457293748486523496582734658273465923756293847623472756982375692837465287356278395692873465289364528756892734659827658927465278963425895659237495273947298374592374957293479273592739457293748486523496582734658273465923756293847623472756982375692837465287356278395692873465289364528756892734659827658927465278963425895659237495273947298374592374957293479273592739457293748486523496582734658273465923756293847623472756982375692837465287356278395692873465289364528756892734659827658927465278963425895659237495273947298374592374957293479273592739457293748486523496582734658273465923756293847623472756982375692837465287356278395692873465289364528756892734659827658927465278963425895659237495273947298374592374957293479273592739457293748486523496582734658273465923756293847623472756982375692837465287356278395692873465289364528756892734659827658927465278963425895659237495273947298374592374957293479273592739457293748486523496582734658273465923756293847623472756982375692837465287356278395692873465289364528756892734659827658927465278963425895659237495273947298374592374957293479273592739457293748486523496582734658273465923756293847623472756982375692837465287356278395692873465289364528756892734659827658927465278963425895659237495273947]
            bubble.bubble_sort(arr)

            
            for i in range(len(arr)):
                print("% f" % arr[i], end=" ")

            for i in range(len(arr)-1):
                if i == len(arr):
                    break
                if arr[i] > arr[i+1]:
                    print('\nteste_super_numero: falha em organizar')
                
        except Exception as ex:
            print('\nErro na validação de dados no teste_super_numero ')
            print(ex)


    def teste_notacao():
        print('\nteste_notacao: ')
        try:
            arr, base = [0.00000000000000000000000000000000000000000000000000000000000002,
            0.00000000000000000000000000000000000000000000000000000000000003,
            0.00000000000000000000000000000000000000000000000000000000000004]
            bubble.bubble_sort(arr)

            
            for i in range(len(arr)):
                print("% f" % arr[i], end=" ")

            for i in range(len(arr)-1):
                if i == len(arr):
                    break
                if arr[i] > arr[i+1]:
                    print('\nteste_notacao: falha em organizar')
                
        except Exception as ex:
            print('\nErro na validação de dados no teste_notacao ')
            print(ex)


    def teste_coliseu():
        print('\nteste_coliseu: ')
        try:
            arr, base = [0.00000000000000000000000000000000000000000000000000000000000002,

            bubble.bubble_sort(arr)

            
            for i in range(len(arr)):
                print("% f" % arr[i], end=" ")

            for i in range(len(arr)-1):
                if i == len(arr):
                    break
                if arr[i] > arr[i+1]:
                    print('\nteste_coliseu: falha em organizar')
                
        except Exception as ex:
            print('\nErro na validação de dados no teste_coliseu ')
            print(ex)"""
if __name__ == "__main__":
    unittest.main()