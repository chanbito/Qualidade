import datetime
from bubble import bubble

def teste_vazio():
    print('\nteste_vazio: ')
    try:
        arr = []
        bubble.bubble_sort(arr)

        
        for i in range(len(arr)):
            print("% d" % arr[i], end=" ")

        for i in range(len(arr)-1):
            if i == len(arr):
                break
            if arr[i] > arr[i+1]:
                print('\nteste_vazio: falha em organizar')
            
    except Exception as ex:
        print('\nErro na validação de dados no teste_vazio ')
        print(ex)


def teste_negativo():
    print('\nteste_negativo: ')
    try:
        arr = [64, 34, 25,-2, 12, 22, 11, 90]
        bubble.bubble_sort(arr)

        
        for i in range(len(arr)):
            print("% d" % arr[i], end=" ")

        for i in range(len(arr)-1):
            if i == len(arr):
                break
            if arr[i] > arr[i+1]:
                print('\nteste_negativo: falha em organizar')
            
    except Exception as ex:
        print('\nErro na validação de dados no teste_negativo ')
        print(ex)


def teste_string():
    print('\nteste_string: ')
    try:
        arr = [64, 34, 25, '12', 22, 11, 90]
        bubble.bubble_sort(arr)
        
        
        for i in range(len(arr)):
            print("% d" % arr[i], end=" ")

        for i in range(len(arr)-1):
            if i == len(arr):
                break
            if arr[i] > arr[i+1]:
                print('\nteste_string: falha em organizar')
            
    except Exception as ex:
        print('\nErro na validação de dados no teste_string ')
        print(ex)


def teste_Letra():

    print('\nteste_Letra: ')

    try:
        arr = [64, 34, 25, 'A', 22, 11, 90]
        bubble.bubble_sort(arr)
        
        for i in range(len(arr)):
            print("% d" % arr[i], end=" ")

        for i in range(len(arr)-1):
            if i == len(arr):
                break
            if arr[i] > arr[i+1]:
                print('\nteste_Letra: falha em organizar')
            
    except Exception as ex:
        print('\nErro na validação de dados no teste_Letra ')
        print(ex)


def teste_Letra_primeira():
    print('\nteste_Letra_primeira: ')
    try:
        arr = ['A', 64, 34, 25,  22, 11, 90]
        bubble.bubble_sort(arr)
        
        
        for i in range(len(arr)):
            print("% d" % arr[i], end=" ")

        for i in range(len(arr)-1):
            if i == len(arr):
                break
            if arr[i] > arr[i+1]:
                print('\nteste_Letra_primeira: falha em organizar')
            
    except Exception as ex:
        print('\nErro na validação de dados no teste_Letra_primeira ')
        print(ex)


def teste_Letra_ultima():
    print('\nteste_Letra_ultima: ')
    try:
        arr = [90, 64, 34, 25,  22, 11, 'A']
        bubble.bubble_sort(arr)
        
        
        for i in range(len(arr)):
            print("% d" % arr[i], end=" ")

        for i in range(len(arr)-1):
            if i == len(arr):
                break
            if arr[i] > arr[i+1]:
                print('\nteste_Letra_ultima: falha em organizar')
            
    except Exception as ex:
        print('\nErro na validação de dados no teste_Letra_ultima ')
        print(ex)


def teste_caminho_feliz():

    print('\nteste_caminho_feliz: ' )
    try:
        arr = [64, 34, 25, 12, 22, 11, 90]
        bubble.bubble_sort(arr)

        
        for i in range(len(arr)):
            print("% d" % arr[i], end=" ")

        for i in range(len(arr)-1):
            if i == len(arr):
                break
            if arr[i] > arr[i+1]:
                print('\nteste_caminho_feliz: falha em organizar')
            
    except Exception as ex:
        print('\nErro na validação de dados no teste_caminho_feliz ')
        print(ex)


def teste_um_elemento():

    print('\nteste_um_elemento: ' )
    try:
        arr = [64]
        bubble.bubble_sort(arr)

        
        for i in range(len(arr)):
            print("% d" % arr[i], end=" ")

        for i in range(len(arr)-1):
            if i == len(arr):
                break
            if arr[i] > arr[i+1]:
                print('\teste_um_elemento: falha em organizar')
            
    except Exception as ex:
        print('\nErro na validação de dados no teste_um_elemento ')
        print(ex)


def teste_ponto_flutuante():

    print('\nteste_ponto_flutuante: ')
    try:
        arr = [64, 34, 25, 12.5, 22, 11, 90]
        bubble.bubble_sort(arr)

        
        for i in range(len(arr)):
            print("% f" % arr[i], end=" ")

        for i in range(len(arr)-1):
            if i == len(arr):
                break
            if arr[i] > arr[i+1]:
                print('\nteste_ponto_flutuante: falha em organizar')
            
    except Exception as ex:
        print('\nErro na validação de dados no teste_ponto_flutuante ')
        print(ex)


def teste_super_numero():

    print('\n teste_super_numero: ')
    try:
        arr


        bubble.bubble_sort(arr)

        
        for i in range(len(arr)):
            print("% f" % arr[i], end=" ")

        for i in range(len(arr)-1):
            if i == len(arr):
                break
            if arr[i] > arr[i+1]:
                print('\nteste_super_numero: falha em organizar')
            
    except Exception as ex:
        print('\nErro na validação de dados no teste_super_numero ')
        print(ex)


def teste_notacao():
    print('\nteste_notacao: ')
    try:
        arr = [0.00000000000000000000000000000000000000000000000000000000000002,
        0.00000000000000000000000000000000000000000000000000000000000003,
        0.00000000000000000000000000000000000000000000000000000000000004]
        bubble.bubble_sort(arr)

        
        for i in range(len(arr)):
            print("% f" % arr[i], end=" ")

        for i in range(len(arr)-1):
            if i == len(arr):
                break
            if arr[i] > arr[i+1]:
                print('\nteste_notacao: falha em organizar')
            
    except Exception as ex:
        print('\nErro na validação de dados no teste_notacao ')
        print(ex)


def teste_coliseu():
    print('\nteste_coliseu: ')
    try:
        arr = [0.00000000000000000000000000000000000000000000000000000000000002,

        bubble.bubble_sort(arr)

        
        for i in range(len(arr)):
            print("% f" % arr[i], end=" ")

        for i in range(len(arr)-1):
            if i == len(arr):
                break
            if arr[i] > arr[i+1]:
                print('\nteste_coliseu: falha em organizar')
            
    except Exception as ex:
        print('\nErro na validação de dados no teste_coliseu ')
        print(ex)


def teste_data():
    print('\n teste_data: ')
    try:
        arr = [datetime.datetime.now(),
        datetime.datetime.min,
        datetime.datetime.max]
        bubble.bubble_sort(arr)

        
        for i in range(len(arr)):
            print("% f" % arr[i], end=" ")

        for i in range(len(arr)-1):
            if i == len(arr):
                break
            if arr[i] > arr[i+1]:
                print('\n teste_data: falha em organizar')
            
    except Exception as ex:
        print('\nErro na validação de dados no teste_data ')
        print(ex)

if '__main__':
    teste_caminho_feliz()
    teste_negativo()
    teste_string()
    teste_ponto_flutuante()
    teste_vazio()
    teste_Letra()
    teste_um_elemento()
    teste_super_numero()
    teste_notacao()
    teste_coliseu()
    teste_data()